---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: generate-pvc
spec:
  templates:
    - name: main
      inputs:
        parameters:
          - name: name-prefix
          - name: size
          - name: storage-class
      resource:
        action: create
        setOwnerReference: true
        manifest: |
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            generateName: {{ template "argo.input" "name-prefix" }}-
          spec:
            accessModes:
              - ReadWriteOnce
              - ReadOnlyMany
            storageClassName: {{ template "argo.input" "storage-class" }}
            resources:
              requests:
                storage: '{{ template "argo.input" "size" }}''
      outputs:
        parameters:
          - name: pvc-name
            valueFrom:
              jsonPath: '{.metadata.name}'
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: download-ftp-file
spec:
  templates:
    - name: main
      inputs:
        parameters:
          - name: ftp-site
          - name: ftp-path
          - name: local-path
          - name: pvc-name
      volumes:
        - name: state
          persistentVolumeClaim:
            claimName: '{{ template "argo.input" "pvc-name" }}'
      container:
        image: cirrusci/wget
        command: [wget]
        args:
          # Restart from any state
          - --continue
          # Reset the download connection if it goes idle for > 30 seconds.
          - --read-timeout=30
          - --output-document=/state/{{ template "argo.input" "local-path" }}
          - ftp://{{ template "argo.input" "ftp-site" }}/{{ template "argo.input" "ftp-path" }}
        volumeMounts:
          - name: state
            mountPath: /state
        resources:
          requests:
            memory: 512Mi
            cpu: 1000m
          limits:
            memory: 512Mi
            cpu: 1000m
      retryStrategy:
        limit: 32
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: rsync-to-gcs
spec:
  templates:
    - name: main
      inputs:
        parameters:
          - name: pvc-name
          - name: gcs-bucket
          - name: gcs-prefix
      volumes:
        - name: state
          persistentVolumeClaim:
            claimName: '{{ template "argo.input" "pvc-name" }}'
      container:
        image: google/cloud-sdk:slim
        command: [gsutil]
        args:
          - -m
          - rsync
          - -r
          - /state
          - gs://{{ template "argo.input" "gcs-bucket" }}/{{ template "argo.input" "gcs-prefix" }}
        volumeMounts:
          - name: state
            mountPath: /state
            readOnly: true
        resources:
          requests:
            memory: 1Gi
            cpu: 1500m
          limits:
            memory: 2Gi
            cpu: 2000m
      retryStrategy:
        limit: 32
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: download-clinvar-archive
spec:
  templates:
    - name: main
      inputs:
        parameters:
          - name: archive-path
          - name: download-name
      dag:
        tasks:
          - name: generate-download-volume
            templateRef:
              name: generate-pvc
              template: main
            arguments:
              parameters:
                - name: name-prefix
                  value: ftp-download
                - name: size
                  value: 1Gi
                - name: storage-class
                  value: standard
          - name: download-ftp-file
            dependencies: [generate-download-volume]
            templateRef:
              name: download-ftp-file
              template: main
            arguments:
              parameters:
                - name: ftp-site
                  value: ftp.ncbi.nlm.nih.gov
                - name: ftp-path
                  value: pub/clinvar/xml/clinvar_variation/{{ template "argo.input" "archive-path" }}
                - name: local-path
                  value: '{{ template "argo.input" "download-name" }}'
                - name: pvc-name
                  value: '{{ template "argo.task-output" (dict "task-name" "generate-download-volume" "output-name" "pvc-name") }}'
      outputs:
        parameters:
          - name: pvc-name
            valueFrom:
              parameter: '{{ template "argo.task-output" (dict "task-name" "generate-download-volume" "output-name" "pvc-name") }}'
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: extract-xml-to-json
spec:
  templates:
    - name: main
      inputs:
        parameters:
          - name: input-pvc-name
          - name: input-xml-path
          - name: output-pvc-name
      volumes:
        - name: in
          persistentVolumeClaim:
            claimName: '{{ template "argo.input" "input-pvc-name" }}'
        - name: out
          persistentVolumeClaim:
            claimName: '{{ template "argo.input" "output-pvc-name" }}'
      container:
        image: us.gcr.io/broad-dsp-gcr-public/monster-xml-to-json-list:2.1.0
        command: []
        args:
          - --input=/in/{{ template "argo.input" "input-xml-path" }}
          - --output=/out
          - --objects-per-part=1024
          - --gunzip-input
        volumeMounts:
          - name: in
            mountPath: /in
            readOnly: true
          - name: out
            mountPath: /out
        env:
          - name: JAVA_OPTS
            value: '-Xmx2g -Xms2g'
        resources:
          requests:
            memory: 2560Mi
            cpu: 1500m
          limits:
            memory: 2560Mi
            cpu: 1500m
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: extract-clinvar-xml
spec:
  templates:
    - name: main
      inputs:
        parameters:
          - name: xml-pvc-name
          - name: xml-path
      dag:
        tasks:
          - name: generate-extraction-volume
            templateRef:
              name: generate-pvc
              template: main
            arguments:
              parameters:
                - name: name-prefix
                  value: extracted-json
                - name: size
                  value: 10Gi
                - name: storage-class
                  value: standard
          - name: extract-xml
            dependencies: [generate-extraction-volume]
            templateRef:
              name: extract-xml-to-json
              template: main
            arguments:
              parameters:
                - name: input-pvc-name
                  value: '{{ template "argo.input" "xml-pvc-name" }}'
                - name: input-xml-path
                  value: '{{ template "argo.input" "xml-path" }}'
                - name: output-pvc-name
                  value: '{{ template "argo.task-output" (dict "task-name" "generate-extraction-volume" "output-name" "pvc-name") }}'
      outputs:
        parameters:
          - name: pvc-name
            valueFrom:
              parameter: '{{ template "argo.task-output" (dict "task-name" "generate-extraction-volume" "output-name" "pvc-name") }}'
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: ingest-clinvar-archive
spec:
  templates:
    - name: main
      inputs:
        parameters:
          - name: archive-path
          - name: gcs-prefix
      dag:
        tasks:
          - name: download-archive
            templateRef:
              name: download-clinvar-archive
              template: main
            arguments:
              parameters:
                - name: archive-path
                  value: '{{ template "argo.input" "archive-path" }}'
                - name: download-name
                  value: ClinVarRelease.xml
          - name: upload-raw-archive
            dependencies: [download-archive]
            templateRef:
              name: rsync-to-gcs
              template: main
            arguments:
              parameters:
                - name: pvc-name
                  value: '{{ template "argo.task-output" (dict "task-name" "download-archive" "output-name" "pvc-name") }}'
                - name: gcs-bucket
                  value: {{ .Values.gcs.bucketName }}
                - name: gcs-prefix
                  value: {{ template "argo.input" "gcs-prefix" }}/raw
          - name: extract-archive
            dependencies: [download-archive]
            templateRef:
              name: extract-clinvar-xml
              template: main
            arguments:
              parameters:
                - name: xml-pvc-name
                  value: '{{ template "argo.task-output" (dict "task-name" "download-archive" "output-name" "pvc-name") }}'
                - name: xml-path
                  value: ClinVarRelease.xml
          - name: upload-extracted-archive
            dependencies: [extract-archive]
            templateRef:
              name: rsync-to-gcs
              template: main
            arguments:
              parameters:
                - name: pvc-name
                  value: '{{ template "argo.task-output" (dict "task-name" "extract-archive" "output-name" "pvc-name") }}'
                - name: gcs-bucket
                  value:  {{ .Values.gcs.bucketName }}
                - name: gcs-prefix
                  value: {{ template "argo.input" "gcs-prefix" }}/raw
