apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: ingest-clinvar-archive
spec:
  templates:
    - name: main
      inputs:
        parameters:
          - name: archive-path
          - name: gcs-prefix
      dag:
        tasks:
          # 1) Generate a PVC to hold the raw XML.
          - name: generate-download-volume
            templateRef:
              name: generate-pvc
              template: main
            arguments:
              parameters:
                - name: name-prefix
                  value: ftp-download
                - name: size
                  value: '{{ .Values.volumes.downloadSize }}'
                - name: storage-class
                  value: '{{ .Values.volumes.storageClass }}'
          {{- $downloadPvc := "{{tasks.generate-download-volume.outputs.parameters.pvc-name}}" }}

          # 2) Download the raw XML onto the new PVC.
          {{- $localXmlName := "ClinVarRelease.xml" }}
          - name: download-archive
            dependencies: [generate-download-volume]
            templateRef:
              name: download-ftp-file
              template: main
            arguments:
              parameters:
                - name: ftp-site
                  value: 'ftp.ncbi.nlm.nih.gov'
                - name: ftp-path
                  value: 'pub/clinvar/xml/clinvar_variation/{{ "{{inputs.parameters.archive-path}}" }}'
                - name: local-path
                  value: '{{ $localXmlName }}'
                - name: pvc-name
                  value: '{{ $downloadPvc }}'

          # 3a) Upload the raw XML to GCS.
          - name: upload-raw-archive
            dependencies: [download-archive]
            templateRef:
              name: rsync-to-gcs
              template: main
            arguments:
              parameters:
                - name: pvc-name
                  value: '{{ $downloadPvc }}'
                - name: gcs-bucket
                  value: '{{ .Values.gcs.bucketName }}'
                - name: gcs-prefix
                  value: '{{ "{{inputs.parameters.gcs-prefix}}" }}/raw'

          # 3b) Generate a PVC to hold extracted JSON-list files.
          - name: generate-extraction-volume
            # Don't generate the PVC until we need it.
            dependencies: [download-archive]
            templateRef:
              name: generate-pvc
              template: main
            arguments:
              parameters:
                - name: name-prefix
                  value: extracted-json
                - name: size
                  value: '{{ .Values.volumes.extractSize }}'
                - name: storage-class
                  value: '{{ .Values.volumes.storageClass }}'
          {{- $extractionPvc := "{{tasks.generate-extraction-volume.outputs.parameters.pvc-name}}" }}

          # 4) Extract raw XML to JSON-list.
          - name: extract-xml
            dependencies: [generate-extraction-volume]
            templateRef:
              name: extract-xml-to-json
              template: main
            arguments:
              parameters:
                - name: input-pvc-name
                  value: '{{ $downloadPvc }}'
                - name: input-xml-path
                  value: '{{ $localXmlName }}'
                - name: output-pvc-name
                  value: '{{ $extractionPvc }}'

          # 5) Upload JSON-list data to GCS.
          - name: upload-extracted-archive
            dependencies: [extract-xml]
            templateRef:
              name: rsync-to-gcs
              template: main
            arguments:
              parameters:
                - name: pvc-name
                  value: '{{ $extractionPvc }}'
                - name: gcs-bucket
                  value:  '{{ .Values.gcs.bucketName }}'
                - name: gcs-prefix
                  value: '{{ "{{inputs.parameters.gcs-prefix}}" }}/raw'
