{{- $schemaImage := printf "us.gcr.io/broad-dsp-gcr-public/clinvar-schema:%s" (default "latest" .Chart.AppVersion) }}
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: diff-table
spec:
  templates:
    - name: main
      inputs:
        parameters:
          - name: table-name
          - name: gcs-bucket
          - name: input-prefix
          - name: old-ids-output-prefix
          - name: new-rows-output-prefix
          - name: staging-bq-project
          - name: staging-bq-dataset
          - name: jade-bq-project
          - name: jade-bq-dataset
      dag:
        tasks:
          # 1) Build a join table containing both IDs to delete and new rows to append.
          - name: join-staging-to-existing
            template: join-staging-to-existing
            arguments:
              parameters:
                - name: table-name
                  value: '{{ "{{inputs.parameters.table-name}}" }}'
                - name: gcs-bucket
                  value: '{{ "{{inputs.parameters.gcs-bucket}}" }}'
                - name: input-prefix
                  value: '{{ "{{inputs.parameters.input-prefix}}" }}'
                - name: staging-bq-project
                  value: '{{ "{{inputs.parameters.staging-bq-project}}" }}'
                - name: staging-bq-dataset
                  value: '{{ "{{inputs.parameters.staging-bq-dataset}}" }}'
                - name: jade-bq-project
                  value: '{{ "{{inputs.parameters.jade-bq-project}}" }}'
                - name: jade-bq-dataset
                  value: '{{ "{{inputs.parameters.jade-bq-dataset}}" }}'
                - name: output-table-suffix
                  value: '{{ template "argo.timestamp" }}'
          # 2a) Query just the IDs to delete from the join table.
          - name: query-ids-to-delete
            dependencies: [join-staging-to-existing]
            template: query-ids-to-delete
            arguments:
              parameters:
                - name: table-name
                  value: '{{ "{{inputs.parameters.table-name}}" }}'
                - name: join-table-name
                  value: '{{ "{{tasks.join-staging-to-existing.outputs.result}}" }}'
                - name: bq-project
                  value: '{{ "{{inputs.parameters.staging-bq-project}}" }}'
                - name: bq-dataset
                  value: '{{ "{{inputs.parameters.staging-bq-dataset}}" }}'
                - name: output-table-suffix
                  value: '{{ template "argo.timestamp" }}'
          # 2b) Check how many IDs there are to delete.
          - name: query-id-count
            dependencies: [query-ids-to-delete]
            template: get-bq-table-size
            arguments:
              parameters:
                - name: bq-project
                  value: '{{ "{{inputs.parameters.staging-bq-project}}" }}'
                - name: bq-dataset
                  value: '{{ "{{inputs.parameters.staging-bq-dataset}}" }}'
                - name: bq-table
                  value: '{{ "{{tasks.query-ids-to-delete.outputs.result}}" }}'
          # 2c) If there are IDs to delete, extract them to GCS.
          - name: extract-ids-to-delete
            dependencies: [query-ids-to-delete, query-id-count]
            template: extract-bq-table
            when: '{{ "{{tasks.query-id-count.outputs.result}} > 0" }}'
            arguments:
              parameters:
                - name: input-table-name
                  value: '{{ "{{tasks.query-ids-to-delete.outputs.result}}" }}'
                - name: bq-project
                  value: '{{ "{{inputs.parameters.staging-bq-project}}" }}'
                - name: bq-dataset
                  value: '{{ "{{inputs.parameters.staging-bq-dataset}}" }}'
                - name: output-format
                  value: CSV
                - name: gcs-bucket
                  value: '{{ "{{inputs.parameters.gcs-bucket}}" }}'
                - name: gcs-prefix
                  value: '{{ "{{inputs.parameters.old-ids-output-prefix}}" }}'
          # 3a) Query just the rows to append from the join table.
          - name: query-rows-to-append
            dependencies: [join-staging-to-existing]
            template: query-rows-to-append
            arguments:
              parameters:
                - name: table-name
                  value: '{{ "{{inputs.parameters.table-name}}" }}'
                - name: join-table-name
                  value: '{{ "{{tasks.join-staging-to-existing.outputs.result}}" }}'
                - name: bq-project
                  value: '{{ "{{inputs.parameters.staging-bq-project}}" }}'
                - name: bq-dataset
                  value: '{{ "{{inputs.parameters.staging-bq-dataset}}" }}'
                - name: output-table-suffix
                  value: '{{ template "argo.timestamp" }}'
          # 3b) Check how many rows there are to append.
          - name: query-row-count
            dependencies: [query-rows-to-append]
            template: get-bq-table-size
            arguments:
              parameters:
                - name: bq-project
                  value: '{{ "{{inputs.parameters.staging-bq-project}}" }}'
                - name: bq-dataset
                  value: '{{ "{{inputs.parameters.staging-bq-dataset}}" }}'
                - name: bq-table
                  value: '{{ "{{tasks.query-rows-to-append.outputs.result}}" }}'
          # 3c) If there are rows to append, extract them to GCS.
          - name: extract-rows-to-append
            dependencies: [query-rows-to-append, query-row-count]
            template: extract-bq-table
            when: '{{ "{{tasks.query-row-count.outputs.result}} > 0" }}'
            arguments:
              parameters:
                - name: input-table-name
                  value: '{{ "{{tasks.query-rows-to-append.outputs.result}}" }}'
                - name: bq-project
                  value: '{{ "{{inputs.parameters.staging-bq-project}}" }}'
                - name: bq-dataset
                  value: '{{ "{{inputs.parameters.staging-bq-dataset}}" }}'
                - name: output-format
                  value: NEWLINE_DELIMITED_JSON
                - name: gcs-bucket
                  value: '{{ "{{inputs.parameters.gcs-bucket}}" }}'
                - name: gcs-prefix
                  value: '{{ "{{inputs.parameters.new-rows-output-prefix}}" }}'
      outputs:
        parameters:
          - name: ids-to-delete-count
            valueFrom:
              parameter: '{{ "{{tasks.query-id-count.outputs.result}}" }}'
          - name: rows-to-append-count
            valueFrom:
              parameter: '{{ "{{tasks.query-row-count.outputs.result}}" }}'

    - name: join-staging-to-existing
      inputs:
        parameters:
          - name: table-name
          - name: gcs-bucket
          - name: input-prefix
          - name: staging-bq-project
          - name: staging-bq-dataset
          - name: jade-bq-project
          - name: jade-bq-dataset
          - name: output-table-suffix
      {{- include "argo.retry" . | indent 6 }}
      script:
        image: {{ $schemaImage }}
        env:
          - name: STAGING_PROJECT
            value: '{{ "{{inputs.parameters.staging-bq-project}}" }}'
          - name: STAGING_DATASET
            value: '{{ "{{inputs.parameters.staging-bq-dataset}}" }}'
          - name: JADE_PROJECT
            value: '{{ "{{inputs.parameters.jade-bq-project}}" }}'
          - name: JADE_DATASET
            value: '{{ "{{inputs.parameters.jade-bq-dataset}}" }}'
          - name: TABLE
            value: '{{ "{{inputs.parameters.table-name}}" }}'
          - name: GCS_PREFIX
            value: '{{ "gs://{{inputs.parameters.gcs-bucket}}/{{inputs.parameters.input-prefix}}" }}'
          - name: OUTPUT_SUFFIX
            value: '{{ "{{inputs.parameters.output-table-suffix}}" }}'
        command: [bash]
        source: |
          {{- range .Files.Lines "scripts/diff-bq-table.sh" }}
          {{ . }}
          {{- end }}

    - name: query-ids-to-delete
      inputs:
        parameters:
          - name: table-name
          - name: join-table-name
          - name: bq-project
          - name: bq-dataset
          - name: output-table-suffix
      {{- include "argo.retry" . | indent 6 }}
      script:
        image: {{ $schemaImage }}
        env:
          - name: PROJECT
            value: '{{ "{{inputs.parameters.bq-project}}" }}'
          - name: DATASET
            value: '{{ "{{inputs.parameters.bq-dataset}}" }}'
          - name: INPUT_TABLE
            value: '{{ "{{inputs.parameters.join-table-name}}" }}'
          - name: OUTPUT_PREFIX
            value: '{{ "{{inputs.parameters.table-name}}" }}'
          - name: OUTPUT_SUFFIX
            value: '{{ "{{inputs.parameters.output-table-suffix}}" }}'
        command: [bash]
        source: |
          {{- range .Files.Lines "scripts/query-non-null-row-ids.sh" }}
          {{ . }}
          {{- end }}

    - name: query-rows-to-append
      inputs:
        parameters:
          - name: table-name
          - name: join-table-name
          - name: bq-project
          - name: bq-dataset
          - name: output-table-suffix
      {{- include "argo.retry" . | indent 6 }}
      script:
        image: {{ $schemaImage }}
        env:
          - name: PROJECT
            value: '{{ "{{inputs.parameters.bq-project}}" }}'
          - name: DATASET
            value: '{{ "{{inputs.parameters.bq-dataset}}" }}'
          - name: INPUT_TABLE
            value: '{{ "{{inputs.parameters.join-table-name}}" }}'
          - name: TABLE
            value: '{{ "{{inputs.parameters.table-name}}" }}'
          - name: OUTPUT_SUFFIX
            value: '{{ "{{inputs.parameters.output-table-suffix}}" }}'
        command: [bash]
        source: |
          {{- range .Files.Lines "scripts/query-non-null-rows.sh" }}
          {{ . }}
          {{- end }}

    - name: get-bq-table-size
      inputs:
        parameters:
          - name: bq-project
          - name: bq-dataset
          - name: bq-table
      {{ include "argo.retry" . | indent 6 }}
      script:
        image: {{ $schemaImage }}
        env:
          - name: PROJECT
            value: '{{ "{{inputs.parameters.bq-project}}" }}'
          - name: DATASET
            value: '{{ "{{inputs.parameters.bq-dataset}}" }}'
          - name: TABLE
            value: '{{ "{{inputs.parameters.bq-table}}" }}'
        command: [bash]
        source: |
          {{- range .Files.Lines "scripts/get-bq-table-size.sh" }}
          {{ . }}
          {{- end }}

    - name: extract-bq-table
      inputs:
        parameters:
          - name: input-table-name
          - name: bq-project
          - name: bq-dataset
          - name: output-format
          - name: gcs-bucket
          - name: gcs-prefix
      {{- include "argo.retry" . | indent 6 }}
      script:
        image: {{ $schemaImage }}
        env:
          - name: PROJECT
            value: '{{ "{{inputs.parameters.bq-project}}" }}'
          - name: DATASET
            value: '{{ "{{inputs.parameters.bq-dataset}}" }}'
          - name: TABLE
            value: '{{ "{{inputs.parameters.input-table-name}}" }}'
          - name: OUTPUT_FORMAT
            value: '{{ "{{inputs.parameters.output-format}}" }}'
          - name: GCS_BUCKET
            value: '{{ "{{inputs.parameters.gcs-bucket}}" }}'
          - name: GCS_PREFIX
            value: '{{ "{{inputs.parameters.gcs-prefix}}" }}'
        command: [bash]
        source: |
          {{- range .Files.Lines "scripts/extract-bq-table.sh" }}
          {{ . }}
          {{- end }}
